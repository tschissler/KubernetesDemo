@page "/"
@using PrimeDecompositionUi.Data
@using System.Net.Http.Json
@using Dtos
@using MatBlazor

@inject HttpClient httpClient

<h1>Enter Parameter for Prime Decomposition</h1>
<EditForm Model="@_numberGeneratorParameter">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="m-4">
        <label>Max number:</label>
        <br />
        <MatSlider 
                    Discrete="true" 
                    Step="1000" 
                    EnableStep="true" 
                    Immediate="true" 
                    @bind-Value="@maxVal" 
                    TValue="long" 
                    ValueMin="0" 
                    ValueMax="50000000"
                    Disabled="@_running"/>
        <MatNumericUpDownField 
                               @bind-Value=@_numberGeneratorParameter.MaxNumber
                               Step="1000"
                               Format="#,##0"
                               DecimalPlaces=0
                               Disabled="@_running"/>
        
    </div>
    <div class="m-4">
        <label for="intervalinmillis">Interval in Milliseconds:</label>
        <br />
                <MatSlider 
                    Discrete="true" 
                    Step="10" 
                    EnableStep="true" 
                    Immediate="true" 
                    @bind-Value="@intervalVal" 
                    TValue="long" 
                    ValueMin="0" 
                    ValueMax="1000"
                    Disabled="@_running"/>
        <MatNumericUpDownField 
                               @bind-Value=@_numberGeneratorParameter.IntervalInMillis
                               Step="10"
                               Format="#,##0"
                               DecimalPlaces=0
                               Disabled="@_running"/>
    </div>
</EditForm>
<div class="m-4">
    <button class="btn-lg" type="button" @onclick="Start" disabled="@_running">Start</button>
    <button class="btn-lg" type="button" @onclick="Stop" disabled="@(!_running)">Stop</button>
    <button class="btn-lg" type="button" @onclick="ResetStats" disabled="@(!Statistics.Any())">Reset stats</button>
</div>
<div>
    <ul>
        @foreach (var stat in Statistics)
        {
            <li>@stat.Number = @string.Join(" * ", stat.Result) (@stat.DurationInMilliseconds ms)</li>
        }
    </ul>
</div>
@code
{
    private long maxVal
    {
        get => _numberGeneratorParameter.MaxNumber;
        set
        {
            _numberGeneratorParameter.MaxNumber = value;
            this.StateHasChanged();
        }
    }

    private long intervalVal
    {
        get => _numberGeneratorParameter.IntervalInMillis;
        set
        {
            _numberGeneratorParameter.IntervalInMillis = value;
            this.StateHasChanged();
        }
    }

    private readonly NumberGeneratorParameter _numberGeneratorParameter = new();

    private List<CallStatisticDto> Statistics { get; set; } = new();

    private readonly string _url = Environment.GetEnvironmentVariable("NUMBER_GENERATOR_URL");

    private bool _running = false;

    private System.Timers.Timer _timer;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await UpdateStats();
    }

    private void OnSliderChanged(long value)
    {
        maxVal = value;
    }

    private async Task Start()
    {
        if (_running)
        {
            return;
        }

        await httpClient.GetAsync($"{_url}/start?max={_numberGeneratorParameter.MaxNumber}&interval={_numberGeneratorParameter.IntervalInMillis}");
        _running = true;
        _timer = new System.Timers.Timer(500);
        _timer.Elapsed += async (_, _) => await UpdateStats();
        _timer.Start();
    }

    private Task Stop()
    {
        _running = false;
        _timer.Stop();
        return httpClient.GetAsync($"{_url}/stop");
    }

    private async Task UpdateStats()
    {
        var response = await httpClient.GetAsync($"{_url}/stats");
        Statistics = await response.Content.ReadFromJsonAsync<List<CallStatisticDto>>();
        await InvokeAsync(StateHasChanged);
    }

    private async Task ResetStats()
    {
        await httpClient.GetAsync($"{_url}/reset");
        await UpdateStats();
    }
}
