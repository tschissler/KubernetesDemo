@page "/"
@using System.Net.Http
@using PrimeDecompositionUi.Data
@using System.Net.Http.Json
@using Dtos
@using Microsoft.AspNetCore.SignalR.Client
@using MatBlazor
@using Plotly.Blazor
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces

@inject HttpClient httpClient

<h1>Enter Parameter for Prime Decomposition</h1>
<EditForm Model="@_numberGeneratorParameter">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="m-4">
        <label>Max number:</label>
        <br />
        <MatSlider 
                    Discrete="true" 
                    Step="1000" 
                    EnableStep="true" 
                    Immediate="true" 
                    @bind-Value="@maxVal" 
                    TValue="long" 
                    ValueMin="0" 
                    ValueMax="50000000"
                    Disabled="@_running"/>
        <MatNumericUpDownField 
                               @bind-Value=@maxVal
                               Step="1000"
                               Format="#,##0"
                               DecimalPlaces=0
                               Disabled="@_running"/>
        
    </div>
    <div class="m-4">
        <label for="intervalinmillis">Interval in Milliseconds:</label>
        <br />
                <MatSlider 
                    Discrete="true" 
                    Step="10" 
                    EnableStep="true" 
                    Immediate="true" 
                    @bind-Value="@intervalVal" 
                    TValue="long" 
                    ValueMin="0" 
                    ValueMax="10000"
                    Disabled="@_running"/>
        <MatNumericUpDownField 
                               @bind-Value=@intervalVal
                               Step="10"
                               Format="#,##0"
                               DecimalPlaces=0/>
    </div>
</EditForm>
<div class="m-4">
    <button class="btn-lg" type="button" @onclick="Start" disabled="@_running">Start</button>
    <button class="btn-lg" type="button" @onclick="Stop" disabled="@(!_running)">Stop</button>
    <button class="btn-lg" type="button" @onclick="ResetStats" disabled="@(!Statistics.Any())">Reset stats</button>
</div>
<div class="container">
    <div class="row">
<div class="col">
            <PlotlyChart Id="TestId" Config="config" Layout="layout" Data="data" @ref="chart"/>
        </div>
    </div>
</div>

@code
{
    private HubConnection hubConnection;
    PlotlyChart chart;

    Config config = new Config
    {
        Responsive = true
    };

    Layout layout = new Layout
    {
        Title = new Title
        {
            Text = "Number of calculations per period (10s)"
        },
        BarMode = BarModeEnum.Overlay,
        Height = 500
    };

    List<ITrace> data = new List<ITrace>
    {
        new Bar
        {
            X = new List<object> {0},
            Y = new List<object> {0}
        }
    };

    int lastConsideredIndexForAverage = 0;
    int chart_x = 1;

    private long maxVal
    {
        get => _numberGeneratorParameter.MaxNumber;
        set
        {
            _numberGeneratorParameter.MaxNumber = value;
            this.StateHasChanged();
        }
    }

    private long intervalVal
    {
        get => _numberGeneratorParameter.IntervalInMillis;
        set
        {
            _numberGeneratorParameter.IntervalInMillis = value;
            if (_running)
            {
                httpClient.GetAsync($"{_url}/updateinterval?interval={_numberGeneratorParameter.IntervalInMillis}");
            }
            this.StateHasChanged();
        }
    }

    private readonly NumberGeneratorParameter _numberGeneratorParameter = new();

    private List<CallStatisticDto> Statistics { get; set; } = new();

    private readonly string _url = Environment.GetEnvironmentVariable("NUMBER_GENERATOR_URL");

    private bool _running = false;

    private System.Timers.Timer _timer;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(_url + "/signalr")
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<long>("UpdateStatistics", async (calls) =>
        {
            if (!(chart.Data.FirstOrDefault() is Bar bar)) return;

            var y = calls;
            await chart.PrependTrace(chart_x, y, data.IndexOf(bar));
            chart_x++;
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        try
        {
            var response = await httpClient.GetAsync($"{_url}/getcurrentstate");
            var state = await response.Content.ReadFromJsonAsync<FullStatusDto>();
            _running = state.Status;
            maxVal = state.CurrentMaxValue;
            intervalVal = state.CurrentInterval;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }

        await base.OnInitializedAsync();
    }
    
    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    private void OnSliderChanged(long value)
    {
        maxVal = value;
    }

    private async Task Start()
    {
        if (_running)
        {
            return;
        }

        await httpClient.GetAsync($"{_url}/start?max={_numberGeneratorParameter.MaxNumber}&interval={_numberGeneratorParameter.IntervalInMillis}");
        _running = true;
    }

    private Task Stop()
    {
        _running = false;
        return httpClient.GetAsync($"{_url}/stop");
    }

    private async Task ResetStats()
    {
        chart_x = 1;

        if (!(chart.Data.FirstOrDefault() is Bar bar)) return;
        bar.X.Clear();
        bar.Y.Clear();
        chart.React();
    }
}
