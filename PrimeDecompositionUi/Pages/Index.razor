@page "/"
@using PrimeDecompositionUi.Data
@using System.Threading
@using System.Timers

@inject HttpClient httpClient

<h1>Enter Parameter for Prime Decomposition</h1>
<EditForm Model="@numberGeneratorParameter">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="m-4">
        <label for="maxnumber">Max number:</label>
        <br/>
        <InputNumber class="text-xl-center" @bind-Value="numberGeneratorParameter.MaxNumber" id="maxnumber"/>
    </div>
    <div class="m-4">
        <label for="intervalinmillis">Interval in Milliseconds:</label>
        <br/>
        <InputNumber class="text-xl-center" @bind-Value="numberGeneratorParameter.IntervalInMillis" id="intervalinmillis"/>
    </div>
</EditForm>
<div class="m-4">
    <button class="btn-lg" type="button" @onclick="Start">Start</button>
    <button class="btn-lg" type="button" @onclick="Stop">Stop</button>
    <button class="btn-lg" type="button" @onclick="Stats">Update stats</button>
</div>
<div>
    @TheStats
</div>
@code
{
    private readonly NumberGeneratorParameter numberGeneratorParameter = new();
    
    private string TheStats { get; set; }

    private string Url = Environment.GetEnvironmentVariable("NUMBER_GENERATOR_URL");

    private async Task Start()
    {
        await httpClient.GetAsync($"{Url}/start?max={numberGeneratorParameter.MaxNumber}&interval={numberGeneratorParameter.IntervalInMillis}");
    }

    private async Task Stop()
    {
        await httpClient.GetAsync($"{Url}/stop");
    }

    private async Task Stats()
    {
        var response = await httpClient.GetAsync($"{Url}/stats");
        TheStats = await response.Content.ReadAsStringAsync();
    }
}
